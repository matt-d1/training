input {

  # Listen on port 9400 for incoming traffic (this will be the Logstash shipper in this case)
  tcp {
    port => 9400
    mode => "server"
    type => "tcpdata"
  }

  
  file {
    type => "xtpfile"
    path => "\\\\10.98.130.9\\shared\\ELK\\data\\OMSTH_1022.Flog.log"
    codec => multiline {
      patterns_dir => "D:\\ELK\\bin\\logstash-2.1.1\\patterns"
      pattern => "^(%{WORD}: )?%{XTPTIME}"
      negate => true
      what => previous
    }
  }

  tcp {
    port => 9480
    mode => "server"
    type => "digital"
    codec => json_lines
  }

  tcp {
    port => 9479
    mode => "server"
    type => "xtp"
    codec => json
  }

  tcp {
    port => 9478
    mode => "server"
    codec => json_lines
    tags => [ "FxF" ]
  }


  tcp {
    port => 9477
    mode => "server"
    type => "eventlog"
    codec => json_lines
  }
  

  rabbitmq {
    host => "abcapemirdev"
    subscription_retry_interval_seconds => 5
    exchange => "Abcap.Blueberry.Infrastructure.Logging.Messages.ILogMessageBase:Abcap.Blueberry.Infrastructure"
    user => "logstash"
    password => "logstash"
    key => "#"
    type => "emir"
    metadata_enabled => true
    queue => logstash
  }

  rabbitmq {
    host => "jhbdwmvdi000210"
    subscription_retry_interval_seconds => 5
    exchange => "playground"
    user => "guest"
    password => "guest"
    key => "consumer.playground"
    type => "fa"
    queue => "fa_elasticsearch"
  }


  #eventlog {
  #  logfile  => "Application"
  #  type => "eventlog"
  #}

  #eventlog {
  #  logfile  => "System"
  #  type => "eventlog"
  #}
  
  # Uncomment this section to take inputs from the command window
  #stdin {
  #  type => "userinput"
  #}

}

filter {

  if [type] !~ /(.+)/ {
    mutate {
      add_tag => [ "_drop" ]
    }
  }

  if "FxF" in [tags] {
    mutate {
      remove_field => [ "port", "tags" ]
      remove_tag => [ "FxF" ]
    }
  }

  if [type] == "tcpdata" {
    json {
     "source" => "message"
    }
  }

  if [type] == "emir" {
    if "LogMessage" in [Tags] {
      mutate {
        replace => { "type" => "emir-infra"}
      }    
    }

    if "TrafficLogMessage" in [Tags] {
      mutate {
        replace => { "type" => "emir-traffic"}
      }    
    }

    if "ErrorQueueLogMessage" in [Tags] {
      mutate {
        replace => { "type" => "emir-error"}
      }    
    }
  }


  if [type] == "fa" {
    date {
      match => ["log_record.created", "yyyy-MM-dd HH:mm:ss"]
      timezone => "Etc/UTC"
      target => "@timestamp"
    }
  }


  if [type] == "xtpfile" {

    grok {
      patterns_dir => "D:\\ELK\\bin\\logstash-2.1.1\\patterns"
      match => [ "message", "%{XTPTIME:eventTime}: %{WORD:logSourceType}%{SPACE}: \[%{NUMBER:processNumber:int}\] : %{DATA:messageData}" ]
      match => [ "message", "%{WORD:operation}: %{XTPTIME:eventTime}" ]
      match => [ "path", "%{IP:serverIP}" ]
    }

    date {
      match => [ "eventTime", "dd MMM yyyy, HH:mm:ss.SSS", "dd MMM yyyy, HH:mm:ss" ]
      timezone => "Africa/Johannesburg"
    }

    mutate {
      replace => { "host" => "based on origin" }
     }  
  }

}

output {

  if "_drop" not in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "logstash-%{type}-%{+YYYY.MM.dd}"
    }
  
    # Uncomment this line to echo all lines to the screen for debugging purposes
    # stdout {}

  }
  #Sending to file as for now if we have a bad log entry 
  else {
    file {
      path => "D:\\ELK\\bin\\logstash-2.3.2\\logs\\dropped.log"
      codec =>  rubydebug
      flush_interval => 0
    }
  }
}